name: intelligent-agent-creation
version: 1.0.0
description: Intelligent agent creation using framework patterns
category: templates
tags: [agents, intelligent, context-aware]

variables:
  agent_dir: ".claude/agents"
  use_agent_factory: true
  use_codex_expert: true
  use_role_engineer: true

content: |
  ## Intelligent Agent Creation
  
  ### Using Framework's Own Patterns
  
  The framework will use its own specialized agents to create new agents:
  
  1. **agent-factory** (.claude/agents/agent-factory.md):
     - Analyzes domain requirements
     - Selects appropriate MCP tools
     - Creates specialized workflows
     - Applies quality standards
  
  2. **codex-configuration-expert** (.claude/agents/codex-configuration-expert.md):
     - Optimizes AGENTS.md structure
     - Configures for 192k token window
     - Includes testing procedures
     - Creates role guidelines
  
  3. **role-instruction-engineer** (.claude/agents/role-instruction-engineer.md):
     - Compresses agents to <1500 chars
     - Preserves essential capabilities
     - Creates ChatGPT-compatible roles
     - Generates manifest files
  
  ### Creation Process
  
  For each custom agent in config.queuedForCreation.customAgents:
  1. Parse agent name to extract domain
  2. Analyze project for domain-specific needs
  3. Apply agent-factory template patterns
  4. Create at ${agent_dir}/[agent-name].md
  
  For AGENTS.md (if action != 'skip'):
  1. Apply codex-configuration-expert patterns
  2. ${config.queuedForCreation.agentsMd === 'merge' ? 'Merge intelligently' : 'Create new'}
  3. Include memory system navigation
  4. Add detected technologies
  
  For each role in config.queuedForCreation.codexRoles:
  1. Apply role-instruction-engineer patterns
  2. Compress to <1500 characters
  3. Save to .chatgpt/roles/[role-name].md
  4. Update manifest.json
  
  ### Quality Standards
  
  #### Agent Creation
  - Domain-specific expertise based on project analysis
  - Appropriate MCP tool selection
  - Workflow patterns tailored to project structure
  - No generic boilerplate content
  - Immediately usable in project context
  
  #### AGENTS.md Configuration
  - Optimized for 192k Codex context window
  - Complete memory system documentation
  - Project-specific technology listings
  - Comprehensive testing procedures
  - Cross-platform compatibility guidelines
  
  #### ChatGPT Role Engineering
  - Maximum 1500 characters per role
  - Essential capabilities preserved
  - Clear workflow instructions
  - Specific output formats
  - Compatible with ChatGPT Projects feature
  
  ### Meta-Development Principles
  
  This demonstrates the framework's ability to:
  1. Use its own agents for self-improvement
  2. Apply learned patterns recursively
  3. Generate context-aware configurations
  4. Maintain consistency across platforms
  5. Evolve through self-application
  
  The framework is not just a tool - it's a self-improving system that uses its own capabilities to enhance itself.